/*
 * Visual_Flow.java
 *
 * Created on 26 de Outubro de 2007, 18:20
 */

package rc_flow;


import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import jpcap.*;
import jpcap.packet.Packet;

/**
 *
 * @author  Miguel
 */
public class Visual_Flow extends javax.swing.JFrame {
    
    File current,ficheiro;
    Data_Manipulation datm;
    int N_MAX,ROW_MAX;
    NetworkInterface[] devices;
    JpcapCaptor captor;
    CapThread cap_process;
    int tab_state=0;
    DefaultTableModel model;
    Object[][] model_obj;
    ArrayList portas_antigas;
    
    /** Creates new form Visual_Flow */
    public Visual_Flow() {
        N_MAX = 5;
        ROW_MAX=24;
        model_obj = new Object [ROW_MAX][7];
        current = new File("");
        
        initComponents();
        datm = new Data_Manipulation();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        Captura = new javax.swing.JFrame();
        Cap_Interfaces = new javax.swing.JComboBox();
        Cap_Start = new javax.swing.JButton();
        Cap_Promisc = new javax.swing.JCheckBox();
        Cap_Stop = new javax.swing.JButton();
        Tabela = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        filtrar = new javax.swing.JButton();
        Abrir_Ficheiro = new javax.swing.JButton();
        Tipo_Ficheiro = new javax.swing.JComboBox();
        Botao_Desenhar = new javax.swing.JButton();
        Guardar_Ficheiro = new javax.swing.JButton();
        Combo_campo = new javax.swing.JComboBox();
        Combo_entidade = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        Alavanca = new javax.swing.JSpinner();
        Capturar = new javax.swing.JButton();

        Captura.setBounds(new java.awt.Rectangle(700, 80, 250, 125));

        Cap_Start.setText("Start");
        Cap_Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cap_StartActionPerformed(evt);
            }
        });

        Cap_Promisc.setText("promiscuous");
        Cap_Promisc.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        Cap_Promisc.setMargin(new java.awt.Insets(0, 0, 0, 0));

        Cap_Stop.setText("Stop");
        Cap_Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cap_StopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout CapturaLayout = new org.jdesktop.layout.GroupLayout(Captura.getContentPane());
        Captura.getContentPane().setLayout(CapturaLayout);
        CapturaLayout.setHorizontalGroup(
            CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CapturaLayout.createSequentialGroup()
                .add(CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(CapturaLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Cap_Promisc)
                            .add(Cap_Interfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, CapturaLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(Cap_Stop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Cap_Start)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        CapturaLayout.setVerticalGroup(
            CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CapturaLayout.createSequentialGroup()
                .addContainerGap()
                .add(Cap_Interfaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(CapturaLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Cap_Promisc))
                    .add(CapturaLayout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(CapturaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Cap_Start)
                            .add(Cap_Stop))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RC_flow");
        setMinimumSize(new java.awt.Dimension(800, 500));
        Tabela.setPreferredSize(new java.awt.Dimension(452, 419));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "tempo", "origem", "destino", "aplicação", "nível de rede", "transporte", "info"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(90); jTable1.getColumnModel().getColumn(1).setPreferredWidth(90); jTable1.getColumnModel().getColumn(2).setPreferredWidth(90); jTable1.getColumnModel().getColumn(3).setPreferredWidth(90); jTable1.getColumnModel().getColumn(4).setPreferredWidth(90); jTable1.getColumnModel().getColumn(5).setPreferredWidth(90); jTable1.getColumnModel().getColumn(6).setPreferredWidth(500);
        jTable1.setShowVerticalLines(false);
        jTable1.setShowHorizontalLines(false);

        jTable1.setDefaultRenderer(Object.class,new MyTableCellRenderer());

        Tabela.setViewportView(jTable1);

        filtrar.setText("filtrar");
        filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarActionPerformed(evt);
            }
        });

        Icon myIcon;
        myIcon = new ImageIcon("src/recources/open.gif");
        Abrir_Ficheiro.setIcon(myIcon);
        Abrir_Ficheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Abrir_FicheiroActionPerformed(evt);
            }
        });

        Tipo_Ficheiro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Jpcap)", "Wireshark", "Tcpdump", "Netflow" }));
        Tipo_Ficheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tipo_FicheiroActionPerformed(evt);
            }
        });

        Botao_Desenhar.setText("Desenhar");
        Botao_Desenhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botao_DesenharActionPerformed(evt);
            }
        });

        //Icon myIcon;
        myIcon = new ImageIcon("src/recources/save.gif");
        Guardar_Ficheiro.setIcon(myIcon);
        Guardar_Ficheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Guardar_FicheiroActionPerformed(evt);
            }
        });

        Combo_campo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "todos", "origem", "destino", "aplica\u00e7\u00e3o", "n\u00edvel de rede", "transporte" }));
        Combo_campo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo_campoActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 246, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 221, Short.MAX_VALUE)
        );

        Alavanca.setValue(N_MAX);
        Alavanca.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AlavancaStateChanged(evt);
            }
        });

        Capturar.setText("Capturar");
        Capturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CapturarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(Tabela, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, filtrar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(Botao_Desenhar)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(Alavanca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Combo_entidade, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, Combo_campo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(Capturar)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Tipo_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Abrir_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(Guardar_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Tabela, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Guardar_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(Tipo_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(Capturar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(Abrir_Ficheiro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(38, 38, 38)
                        .add(Combo_campo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Combo_entidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(filtrar)
                                .add(66, 66, 66))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(Botao_Desenhar)
                                    .add(Alavanca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Cap_StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cap_StopActionPerformed
        //captor.close();
        cap_process.stop();
        
        JOptionPane.showMessageDialog(new JFrame(), tab_state + " pacotes capturados");
        this.Captura.dispose();
        tab_state=0;
        this.setEnabled(true);
        this.setVisible(true);
    }//GEN-LAST:event_Cap_StopActionPerformed

    
class MyTableCellRenderer extends DefaultTableCellRenderer {
 private Hashtable Colors = new Hashtable();

 public Component getTableCellRendererComponent(
  JTable table, Object value, boolean isSelected,
  boolean hasFocus, int row, int column)
  {
   Component result = super.getTableCellRendererComponent(
     table, value, isSelected, hasFocus, row, column);
   
   if(row%2 == 0)
        result.setBackground(new Color(234,234,234)); // gray for even no.
   else
        result.setBackground(Color.white); // white for odd no.


   return result;
 }

 public void setRowColor(int row, Color c)
 {
   Colors.put(new Integer(row), c);
 }

 private Color getRowColor(int row)
 {
   return (Color) Colors.get(new Integer(row));
 }
}
    
    
    
class PacketPrinter implements PacketReceiver {
  //this method is called every time Jpcap captures a packet
  public void receivePacket(Packet packet) {
    //just print out a captured packet
        
    try{
        System.out.println(packet);
        
        Data_Jpcap dpc = new Data_Jpcap(portas_antigas);
        dpc.leitor_texto(packet.toString());

        if(portas_antigas.size() != dpc.getPortas_Antigas().size())
        portas_antigas.add(dpc.getPortas_Antigas().get(dpc.getPortas_Antigas().size()-1));
        
        System.out.println(portas_antigas.toString());
        
        
        if(tab_state>ROW_MAX-1){
            Object[] obj = new Object[7];
        
            for(int j=0;j<dpc.getNode().size();j++)
                obj[j] = dpc.getNode().get(j);
        
            model.addRow(obj);
            jTable1.setModel(model);
            
        }
        else
        {
            for(int j=0;j<dpc.getNode().size();j++)
                jTable1.setValueAt(dpc.getNode().get(j),tab_state,j);
        }
        
        datm.add(dpc.getNode());
        tab_state++;
        
            }
    catch(Exception e){}
  }
}
    

class CapThread extends Thread {
         JpcapCaptor captor;
         CapThread(JpcapCaptor captor) {
             this.captor = captor;
         }
 
         public void run() {
             while(true){
             captor.setNonBlockingMode(true);
             captor.processPacket(1,new PacketPrinter());
             }
         }
     }




    private void Cap_StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cap_StartActionPerformed
        this.setEnabled(false);
        Cap_Stop.setEnabled(true);
        Cap_Start.setEnabled(false);
        datm = new Data_Manipulation();
        
        
        
        portas_antigas = new ArrayList();
        ArrayList no = new ArrayList();
        no.add("-1");no.add("-1");no.add("-1");
        for(int i=0;i<1;i++)
            portas_antigas.add(no);
        
      
        
        
        
        
        
        
        if(Cap_Interfaces.getItemCount()==0){
            JOptionPane.showMessageDialog(new JFrame(), "Interfaces de rede não encontrados", "Dialog",JOptionPane.ERROR_MESSAGE);
            this.dispose();
            this.Captura.dispose();
        }
        else{
            try {
            
            boolean promisc = Cap_Promisc.isSelected();
            int index = Cap_Interfaces.getSelectedIndex();
            captor=JpcapCaptor.openDevice(devices[index], 65535, promisc, 20);
            
            cap_process =  new CapThread(captor);
            
            cap_process.start();
            
            
            model = new javax.swing.table.DefaultTableModel( model_obj,
                    new String [] {"tempo", "origem", "destino", "aplicação", "nível de rede", "transporte", "info"});
            
            jTable1.setModel(model);
            
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(500);

            
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        }
         
    }//GEN-LAST:event_Cap_StartActionPerformed

    private void CapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CapturarActionPerformed

        try{
        devices = JpcapCaptor.getDeviceList();
        Cap_Interfaces.removeAllItems();
        
        for (int i = 0; i < devices.length; i++) {
            Cap_Interfaces.addItem(devices[i].description);
            System.out.println(i+": "+devices[i].description);
        }
        //Cap_Interfaces.get
        Cap_Start.setEnabled(true);
        Cap_Stop.setEnabled(false);
        this.Captura.setTitle("Captura");
        this.Captura.setVisible(true);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(new JFrame(), "Erro ao carregar a biblioteca Jpcap", "Dialog",
        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CapturarActionPerformed

    private void Tipo_FicheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tipo_FicheiroActionPerformed
        if(this.Tipo_Ficheiro.getSelectedItem().toString().equals("(Jpcap)"))
            this.Capturar.setEnabled(true);
        else this.Capturar.setEnabled(false);
    }//GEN-LAST:event_Tipo_FicheiroActionPerformed

    
    private void ERRO(Exception e){
        JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Dialog",
        JOptionPane.ERROR_MESSAGE);
    }
    
    private void AlavancaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AlavancaStateChanged
        int x = (Integer) Alavanca.getValue();
        if(x>-1) N_MAX = x;
    }//GEN-LAST:event_AlavancaStateChanged

    private void Combo_campoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo_campoActionPerformed
        String[] s;
        ArrayList arrayl;
        
        
        if(Combo_campo.getSelectedItem().toString()=="origem"){
            arrayl= datm.elementos_campo(1);
        }
        else
        
        if(Combo_campo.getSelectedItem().toString()=="destino"){
            arrayl= datm.elementos_campo(2);
        }
        else
        if(Combo_campo.getSelectedItem().toString()=="aplicação"){
            arrayl= datm.elementos_campo(3);
        }
        else
        if(Combo_campo.getSelectedItem().toString()=="nível de rede"){
            arrayl= datm.elementos_campo(4);
        }
        else
        if(Combo_campo.getSelectedItem().toString()=="transporte"){
            arrayl= datm.elementos_campo(5);
        } 
        else { arrayl = new ArrayList();}
        
        
        s = new String[arrayl.size()];
        
        for(int i=0;i<arrayl.size();i++)
            s[i]=(String) arrayl.get(i);
            
        Combo_entidade.setModel(new javax.swing.DefaultComboBoxModel(s));
            
    }//GEN-LAST:event_Combo_campoActionPerformed

    private void Botao_DesenharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botao_DesenharActionPerformed
          
        MyPanel mp = new MyPanel();
        mp.setBounds(1,1,300,300);
        mp.setBackground(new Color(255,255,255));
        mp.setVisible(true);
        this.jPanel1.add(mp);
        this.jPanel1.updateUI();
    }//GEN-LAST:event_Botao_DesenharActionPerformed

    
class MyPanel extends JPanel {

    public MyPanel() {
        //setBorder(BorderFactory.createLineBorder(Color.black));
    }

    public Dimension getPreferredSize() {
        return new Dimension(300,300);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);       
        
        //parametros
        int len = datm.size();
        Object[] array = datm.conta_elementos_campo(Combo_campo.getSelectedIndex()).toArray();

        int num = Combo_entidade.getItemCount();
        Object[] obj = new Object[num];
        
        for(int i=0;i<num;i++)
            obj[i] = Combo_entidade.getItemAt(i);
        

        
        
        //ordenacao
        Par[] pares = new Par[num];
        for(int i=0;i<num;i++){
            pares[i] = new Par((Integer) array[i],(String) obj[i]);
        }
        
        (new Par()).ordena(pares);
        
        if(num>N_MAX) num=N_MAX; //MAX
        
        array = new Object[num];
        obj = new Object[num];
        
        for(int i=0;i<num;i++){
            array[i] = pares[i].getInt();
            obj[i] = pares[i].getStr();
        }
        
        
        //limites do quadrado
        int x = 20, y = 10 , h = 200, w = 200;
        int yres;
        float percent;
        int p_percent;
        DecimalFormat df = new DecimalFormat("0.00");  
        
        
        for(int i=0;i<num;i++){
            yres = y+10 + ((h-10)/num)*i;
            percent = (((Integer) array[i]).floatValue() / (float) len) * 100;
            p_percent = (new Float(percent * ( ((float) w)/100)  )).intValue();
            
            g.setColor(Color.ORANGE);
            g.fillRect(x,yres+2,p_percent,h/num-20);
            g.drawRect(x,yres+2,w,h/num-20);
            g.drawString(df.format((double) percent)+"%",w,yres);
            g.setColor(Color.BLACK);
            g.drawString(obj[i].toString(),x,yres);
        }
        
        
        g.setColor(Color.ORANGE);
        
    }  
}
    

    
    
    
    
    
    private void Guardar_FicheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Guardar_FicheiroActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save");
        chooser.setApproveButtonText("Save");
        
        
        chooser.showOpenDialog(this);
        
        try{
        
        File f=chooser.getSelectedFile();
        this.setTitle(f.getName());
        
        String output="";
        for(int j=0;j<jTable1.getColumnCount();j++) output+=jTable1.getColumnName(j)+"\t\t";
        for(int i=0;i<jTable1.getRowCount();i++){
            output+="\n";
            for(int j=0;j<jTable1.getColumnCount();j++){
                output+=jTable1.getValueAt(i,j).toString()+"\t";
            }
        }
        
        
        
        BufferedWriter w;
        try {
            w = new BufferedWriter(new FileWriter(f));
            w.write(output);
            w.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        }catch(NullPointerException e){}
    }//GEN-LAST:event_Guardar_FicheiroActionPerformed

    private void Abrir_FicheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Abrir_FicheiroActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(current);
        
        try{
            
        chooser.showOpenDialog(this);
        ficheiro=chooser.getSelectedFile();
        current = new File(ficheiro.getAbsolutePath());
        
        this.setTitle("RC_flow - "+ficheiro.getName());
        
        if(Tipo_Ficheiro.getSelectedItem().toString()=="Wireshark"){
            Data_Wireshark dat = new Data_Wireshark(ficheiro);
            dat.leitor_texto();
            datm = new Data_Manipulation(dat.getList());
        }
        
        if(Tipo_Ficheiro.getSelectedItem().toString()=="Tcpdump"){
            Data_Tcpdump dat = new Data_Tcpdump(ficheiro);
            dat.leitor_texto();
            datm = new Data_Manipulation(dat.getList());
        }
        
        if(Tipo_Ficheiro.getSelectedItem().toString()=="Netflow"){
            Data_Netflow dat = new Data_Netflow(ficheiro);
            dat.leitor_texto();
            datm = new Data_Manipulation(dat.getList());
        }
        
        
        if(Tipo_Ficheiro.getSelectedItem().toString()=="(Jpcap)"){
            
        }
        
        
        }
        catch(NullPointerException e){}
        catch(Exception e){}
    }//GEN-LAST:event_Abrir_FicheiroActionPerformed

    private void filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarActionPerformed
        ArrayList arr,aux;
        String info;
        String campo="";
        String entidade="";
        
        campo=Combo_campo.getSelectedItem().toString();

        try{
        
        if(campo=="todos") arr=(ArrayList) datm.get();
        else{
            entidade=Combo_entidade.getSelectedItem().toString();
            if(campo=="origem") arr=datm.filtragem(1,entidade);
            else
            if(campo=="destino") arr=datm.filtragem(2,entidade);
            else
            if(campo=="aplicação") arr=datm.filtragem(3,entidade);
            else
            if(campo=="nível de rede") arr=datm.filtragem(4,entidade);
            else
            if(campo=="transporte") arr=datm.filtragem(5,entidade);
            else arr= new ArrayList();
        }
        
        jTable1.setModel(new javax.swing.table.DefaultTableModel( new Object [arr.size()][((ArrayList) arr.get(0)).size()],
            new String [] {
                "tempo", "origem", "destino", "aplicação", "nível de rede", "transporte", "info"
            }
        ));
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(500);
        
        
        for(int i=0;i<arr.size();i++){
            for(int j=0;j<((ArrayList) arr.get(i)).size();j++){
                Object obj = ( (ArrayList) ((ArrayList) arr).get(i) ).get(j);
                if(obj.getClass() != arr.getClass())
                    this.jTable1.setValueAt(obj,i,j);
                else{
                    aux=new ArrayList ((ArrayList) obj);
                    info = "exaddr="+aux.get(0)+
                            ", nexthop="+aux.get(1)+
                            ", first="+aux.get(2)+
                            ", last="+aux.get(3)+
                            ", dpkts="+aux.get(4)+
                            ", doctets="+aux.get(5)+
                            ", tos="+aux.get(6);
                    obj = (Object) info;
                    this.jTable1.setValueAt(obj,i,j);
                }
            }
        }
        
        }catch(Exception e){
            ERRO(e);
        }
        
    }//GEN-LAST:event_filtrarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try { 
              UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	} catch (Exception exc) {
	      System.err.println("Error loading L&F: " + exc);
	}
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visual_Flow().setVisible(true);
            }
        });

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir_Ficheiro;
    private javax.swing.JSpinner Alavanca;
    private javax.swing.JButton Botao_Desenhar;
    private javax.swing.JComboBox Cap_Interfaces;
    private javax.swing.JCheckBox Cap_Promisc;
    private javax.swing.JButton Cap_Start;
    private javax.swing.JButton Cap_Stop;
    private javax.swing.JFrame Captura;
    private javax.swing.JButton Capturar;
    private javax.swing.JComboBox Combo_campo;
    private javax.swing.JComboBox Combo_entidade;
    private javax.swing.JButton Guardar_Ficheiro;
    private javax.swing.JScrollPane Tabela;
    private javax.swing.JComboBox Tipo_Ficheiro;
    private javax.swing.JButton filtrar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
